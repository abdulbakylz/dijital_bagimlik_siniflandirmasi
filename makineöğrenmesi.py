# -*- coding: utf-8 -*-
"""makineöğrenmesi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gCyIknysr1u6XdqpLLneLDGCKx6Kw9XI
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import MinMaxScaler
from warnings import filterwarnings



# Veriyi yükleme ve sütun adlarını değiştirme
tips = pd.read_csv('/content/yenidataset.csv', delimiter=";", encoding="latin-1")
df = tips.copy()

# Sütun adlarını değiştirme
df.rename(columns={"User ID": "kullanıcı ID",
                   "Device Model": "cihaz modeli",
                   "Operating System": "işletim sistemi",
                   "Battery Drain (mAh/day)": "Uygulama Kullanım Süresi (dk/gün)",
                   "Screen On Time (hours/day)": "Ekran Açıklık Süresi (saat/gün)",
                   "App Usage Time (min/day)": "Pil Tüketimi (mAh/gün)",
                   "Number of Apps Installed": "Yüklenen Uygulama Sayısı",
                   "Data Usage (MB/day)": "Veri Kullanımı (MB/gün)",
                   "Age": "Yaş", "Gender": "Cinsiyet",
                   "User Behavior Class": "Kullanıcı Davranışı Sınıfı"}, inplace=True)

# Pil Tüketimi ve Kullanım Süresi ile Verimlilik hesaplama
df["Verimlilik"] = df["Pil Tüketimi (mAh/gün)"] / df["Uygulama Kullanım Süresi (dk/gün)"]

# Yeni sütunu normalize etme
scaler = MinMaxScaler()
df["Verimlilik_Normalize"] = scaler.fit_transform(df[["Verimlilik"]])

# Kategorik sütunları sayısal verilere dönüştürme
df["Cinsiyet"] = df["Cinsiyet"].map({"Female": 1, "Male": 2})
df["cihaz modeli"] = df["cihaz modeli"].map({"Google Pixel 5": 1, "OnePlus 9": 2, "Xiaomi Mi 11": 3,
                                               "iPhone 12": 4, "Samsung Galaxy S21": 5})
df["işletim sistemi"] = df["işletim sistemi"].map({"Android": 1, "iOS": 2})

# Görselleştirme
df["Cinsiyet"].value_counts().plot(kind="pie", autopct="%1.1f%%")
plt.ylabel(" ")
plt.show()

sns.barplot(x="Cinsiyet", y="Uygulama Kullanım Süresi (dk/gün)", hue="Yaş", data=df)
plt.show()

# Özellikleri (X) ve etiketleri (y) ayırma
X = df.drop(["Kullanıcı Davranışı Sınıfı"], axis=1)
y = df["Kullanıcı Davranışı Sınıfı"]

# Veri setini eğitim ve test verisi olarak ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modelleri daha net tanımlama ve her model için performans değerlendirmesi

# Model 1: KNN
knn_model = KNeighborsClassifier(n_neighbors=3)

# Model 2: Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Model 3: SVM
svm_model = SVC(kernel='linear', random_state=42)

# Model 4: Logistic Regression
lr_model = LogisticRegression(random_state=42)

# Model 5: Neural Network
nn_model = MLPClassifier(random_state=42)

# Modelleri bir liste içinde saklayıp değerlendirme işlemi
models = {
    "KNN": knn_model,
    "Random Forest": rf_model,
    "SVM": svm_model,
    "Logistic Regression": lr_model,
    "Neural Network": nn_model
}

# Sonuçları saklamak için boş bir liste
results = []

# Her model için eğitim ve tahmin işlemleri
for model_name, model in models.items():
    print(f"{model_name} modelini eğitiyorum...")

    # Modeli eğitme
    model.fit(X_train, y_train)

    # Test verisi üzerinde tahmin yapma
    y_pred = model.predict(X_test)

    # Doğruluk hesaplama
    accuracy = accuracy_score(y_test, y_pred) * 100

    # Sonuçları kaydetme
    results.append({
        "Model": model_name,
        "Accuracy (%)": accuracy,
        "Classification Report": classification_report(y_test, y_pred)
    })

    # Sonuçları konsola yazdırma
    print(f"{model_name} modelinin doğruluğu: {accuracy:.2f}%\n")
    print(f"{model_name} modelinin sınıflandırma raporu:\n{classification_report(y_test, y_pred)}")
    print("-" * 50)

# Sonuçları DataFrame'e dönüştürme
results_df = pd.DataFrame(results)

# Sonuçları yazdırma
print(results_df[["Model", "Accuracy (%)"]])